#!/usr/bin/env ruby
require 'wrest'
require 'erubis'
require 'pp'

Wrest.logger = Logger.new(STDOUT)
Wrest.logger.level = Logger::INFO

class RapidBoard
  def initialize(options)
    @uri = "https://ticket.opower.com/rest/greenhopper/1.0".to_uri(options)
  end

  def sprintquery(id, parameters = {})
    @uri["/sprintquery/#{id.to_s}"].get(parameters)
  end

  def sprintreport(parameters = {})
    @uri['/rapid/charts/sprintreport'].get(parameters)
  end

  def put(uripart='',body = {})
    @uri[uripart].put(body.to_json,{'Content-Type'=>'application/json'})
  end

end

class Jira
  attr_accessor :uri
  def initialize(options)
    @uri = "https://ticket.opower.com/rest/api/2".to_uri(options)
  end

  def search(parameters = {})
    @uri['/search'].get(parameters)
  end

  def field(parameters = {})
    @uri['/field'].get(parameters)
  end

  def put(uripart='',body = {})
    @uri[uripart].put(body.to_json,{'Content-Type'=>'application/json'})
  end
end

# Find out what sprint is active
rapidboard = RapidBoard.new :username=>'faye.salwin', :password=>'FSw2151501'
currentsprint=rapidboard.sprintquery(810).deserialise['sprints'].select{|sprint| sprint['state']=='ACTIVE'}.first

# Query fields to find out the name of the "Sprint" field
jira = Jira.new :username=>'faye.salwin', :password=>'FSw2151501'
fields = jira.field.deserialize
sprintfield = fields.select{ |f| f['name']=='Sprint' }.first
rankfield = fields.select{ |f| f['name']=='Rank' }.first
puts rankfield['customId']

formattedticket = <<eos

https://ticket.opower.com/browse/\e[1m<%=ref%>\e[0m
  \e[1m<%=summary%>\e[0m
<% if assignee.nil? %>
  Assignee: \e[1mUnassigned\e[0m\tReported by: \e[1m<%=reporter['displayName']%>\e[0m
<% else %>
  Assignee: \e[1m<%=assignee['displayName']%>\e[0m\tReported by: \e[1m<%=reporter['displayName']%>\e[0m
<% end %>
  Priority: \e[1m<%=priority['name']%>\e[0m\tStatus: \e[1m<%=status['name']%>\e[0m

<%=description%>

<% comment['comments'].each do |c| %>
\e[1m<%=c['author']['displayName']%>\e[0m: <%=c['body']%>
<% end %>

eos

case ARGV[0]
when "unassigned"
  jira.search(:jql=>"assignee=NULL AND project='SYS'", :fields=>'summary', :expand=>'names').deserialise['issues'].map{|i| puts i['key']+': '+i['fields']['summary'] }

when "list"
  jira.search(:jql=>"assignee WAS 'faye.salwin' AND status WAS open", :fields=>'summary', :expand=>'names').deserialise['issues'].map{|i| puts i['key']+': '+i['fields']['summary'] }

when "show"
  ticket=ARGV[1]
  jira.search(:jql=>"key=#{ticket}", :fields=>'*all,comment', :expand=>'names,metadata,comment').deserialise['issues'].map{|i|
	j = i['fields']
        if j['comment'].nil?
		j['comment'] = {}
		j['comment']['comments'] = []
	end
	j['ref'] = i['key'];
	j['url'] = i['self'];
	puts Erubis::Eruby.new(formattedticket).result(j) }
when "work"
  ticket=ARGV[1]
  sprint=currentsprint['id'].to_i
  updates = {"idOrKeys"=>[ticket],"customFieldId"=>rankfield['customId'], "sprintId"=> sprint, "addToBacklog"=>false}
  rapidboard.put('/sprint/rank', updates)
when "comment"
  ticket=ARGV[1]
  comment=ARGV[2]
  ticketurl=jira.search(:jql=>"key=#{ticket}", :fields=>'summary').deserialise['issues'].first['self']
  ticketurl.slice! jira.uri.to_s
  updates = {"update"=>{'comment'=>[{'add'=>{'body'=>comment}}]}}
  jira.put(ticketurl, updates)
else
  puts "I don't know how to #{ARGV[0]} yet."
end
